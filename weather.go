package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/veandco/go-sdl2/ttf"

	"github.com/veandco/go-sdl2/sdl"
)

//curl 'http://api.openweathermap.org/data/2.5/forecast?id=2639996&APPID=f6fd67d11e7ed8a106b73ba7bb0d24b6'

func updateWeather() (string, error) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	resp, err := http.Get("http://api.openweathermap.org/data/2.5/forecast?id=524901&APPID=f6fd67d11e7ed8a106b73ba7bb0d24b6")
	if err != nil {
		return "", fmt.Errorf("error connecting to weather api: %v", err)
	}
	defer resp.Body.Close()
	bodyBytes, err := ioutil.ReadAll(resp.Body)
	bodyString := string(bodyBytes)
	return string(bodyString), err
}

var portsmouthWeather openWeather

func createWeatherStruct() error {
	weatherjson, err := updateWeather()
	if err != nil {
		return fmt.Errorf("error with weather json: %v", err)
	}
	error := json.Unmarshal([]byte(weatherjson), &portsmouthWeather)
	return error
}

func todaysWeather() (string, error) {
	if err := createWeatherStruct(); err != nil {
		return "", err
	}
	mainWeather := *&portsmouthWeather.List[1].Weather[0].Main
	return mainWeather, nil
}

func newWeather(r *sdl.Renderer) (*weather, error) {
	weathercolor := sdl.Color{R: 255, G: 255, B: 255, A: 255}
	weatherfont, err := ttf.OpenFont("fonts/LemonMilk.ttf", 200)
	if err != nil {
		return nil, fmt.Errorf("could not open weather font %v", err)
	}
	todaysWeather, _ := todaysWeather()
	return &weather{todaysWeather: todaysWeather,
		font:  weatherfont,
		color: weathercolor,
		x:     windowwidth - 400,
		y:     0,
		h:     200,
		w:     400}, nil
}

type weather struct {
	todaysWeather string
	color         sdl.Color
	x, y, h, w    int32
	font          *ttf.Font
}

func (weather *weather) weatherPaint(r *sdl.Renderer) error {
	rect := &sdl.Rect{X: weather.x, Y: weather.y, W: weather.w, H: weather.h}
	s, err := weather.font.RenderUTF8Solid(weather.todaysWeather, weather.color)
	if err != nil {
		return fmt.Errorf("could not render weather: %v", err)
	}
	texture, err := r.CreateTextureFromSurface(s)
	if err != nil {
		return fmt.Errorf("could not create surface: %v", err)
	}
	if err := r.Copy(texture, nil, rect); err != nil {
		return fmt.Errorf("could not copy weather texture: %v", err)
	}
	r.Present()
	return nil
}

func (weather *weather) destroy() {
	weather.font.Close()
}
